generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  IMAGE
  LINK
  TEXT
  ZIP
}

enum AppointmentType {
  CONSULTATION
  THERAPY
  MEETING
  CHECKUP
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum ForumSection {
  ARTICLE
  SELFHELP
  EDUCATIONAL
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  email         String    @unique
  password_hash String
  createdAt     DateTime  @default(now()) @map("createAt")
  role          String    @default("user")

  moods         Mood[]              @relation("UserMoods")
  posts         ForumPost[]         @relation("UserPosts")
  appointments  Appointment[]       @relation("UserAppointments")
  likes         ForumLike[]         @relation("UserLikes")
  comments      ForumComment[]      @relation("UserComments")
}

model Mood {
  id        String   @id @default(uuid()) @db.Uuid
  moodScore Int
  moodDate  DateTime @default(now())
  notes     String
  userId    String   @db.Uuid

  user      User     @relation("UserMoods", fields: [userId], references: [id])
}

model ForumPost {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  title       String
  category    Category
  timestamp   DateTime    @default(now())
  text        String
  fileDest    String?

  likes       ForumLike[]    @relation("PostLikes")
  comments    ForumComment[] @relation("PostComments")

  user        User           @relation("UserPosts", fields: [userId], references: [id])
}

model ForumLike {
  id         String     @id @default(uuid()) @db.Uuid
  userId     String     @db.Uuid
  postId     String     @db.Uuid
  timestamp  DateTime   @default(now())

  user       User       @relation("UserLikes", fields: [userId], references: [id])
  post       ForumPost  @relation("PostLikes", fields: [postId], references: [id])
}

model ForumComment {
  id         String     @id @default(uuid()) @db.Uuid
  userId     String     @db.Uuid
  postId     String     @db.Uuid
  timestamp  DateTime   @default(now())
  text       String

  user       User       @relation("UserComments", fields: [userId], references: [id])
  post       ForumPost  @relation("PostComments", fields: [postId], references: [id])
}

model Appointment {
  id                  String           @id @default(uuid()) @db.Uuid
  userId              String           @db.Uuid
  timestamp           DateTime         @default(now())
  description         String
  appointment_time    DateTime
  appointment_type    AppointmentType
  appointment_status  AppointmentStatus
  appointment_with    String

  user                User             @relation("UserAppointments", fields: [userId], references: [id])
}